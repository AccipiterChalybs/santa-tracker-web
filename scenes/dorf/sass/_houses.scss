// All dimensions below assume cell size of 320x320 (i.e., $dim-house).

// ID dateX dateY
$houses:
"codeboogie",
"traditions",
"elfmaker",
"app",
"presentbounce",
"santasback",
"museum",
"translations",
"snowflake",
"seasonofgiving",
"santaselfie",
"penguindash",
"poseboogie",
"santasearch",
"codelab",
"commandcentre",
"gumball",
"jamband",
"wrapbattle",
"boatload",
"runner",
"jetpack",
"carpool",
"briefing",
"presentdrop",
"mercator",
"racer",
"matching",
"liftoff",
"callfromsanta",
"citylights",
"postcard",
"santascanvas",
"elfski",
"snowball",
"speedsketch",
;

$cells:
    // row 0
    170 225,
    143 218,
    124 230,
    130 286,
    // row 1
    134 290,
    145 264,
    192 242,
    204 240,
    // row 2
    136 250,
    125 222,
    184 240,
    170 255,
    // row 3
    160 240,
    174 225,
    165 250,
    170 220,
    // row 4
    157 170,
    100 265,
    94  252,
    160 262,
    // row 5
    141 256,
    149 285,
    183 259,
    175 296,
    // row 6
    151 278,
    148 260,
    142 245,
    179 341,
;

// # Tablet and above cell alignment

@media (min-width: $width-tablet) {
  .cells {
    @for $i from 1 through length($cells) {
      $data: nth($cells, $i);
      $x: nth($data, 1);
      $y: nth($data, 2);
      $row: floor(($i - 1) / 4);
      $within: ($y / 320);

      .cell:nth-child(#{$i}) {
        $layer: round(($row + $within) * 320);  // z-index must be an integer;

        // TODO(samthor): In 2017, we tried to use CSS variables to pass down positions. IE/Edge
        // struggled with this (even though e.g. it was also polyfilled in Firefox) mostly because
        // we used them inside calc. For now, we set the vars but just explicitly position the
        // `village-house` in the cell here.
        --cell-x: $x / 320;
        --cell-y: $y / 320;
        --cell-layer: $layer;

        village-house {
          left: $x / 320 * 100%;
          top: $y / 320 * 100%;
          z-index: $layer;
        }
      }
    }
  }

  #links {
    .link {
      position: absolute;
      transform: translate(-50%, -50%);
    }
    @for $i from 1 through length($cells) {
      .link:nth-child(#{$i}) {
        $row: floor(($i - 1) / 4);
        $col: ($i - 1) % 4;

        $data: nth($cells, $i);
        $x: nth($data, 1);
        $y: nth($data, 2);

        left: ($col * 192px) + ($x / 320) * 192px;
        top: ($row * 192px) + ($y / 320) * 192px;
      }
    }
  }
}
@media (min-width: $width-desktop) {
  #links {
    // FIXME: this is a horrible clone of above for 320px dimensions.
    @for $i from 1 through length($cells) {
      .link:nth-child(#{$i}) {
        $row: floor(($i - 1) / 4);
        $col: ($i - 1) % 4;

        $data: nth($cells, $i);
        $x: nth($data, 1);
        $y: nth($data, 2);

        left: ($col * 320px) + $x;
        top: ($row * 320px) + $y;
      }
    }
  }
}

#links {
  @for $i from 1 through length($houses) {
    $house: nth($houses, $i);
    $id: nth($house, 1);

    .link[house="#{$id}"] {
      .card::before {
        background-image: url(../../images/scenes/#{$id}_2x.png);;
      }
    }
  }
}
$tick-time: 0.6s;  // time for number to tick over
$bar-color: #ff0160;

:host {
  display: block;
  will-change: transform;
  transform: translateZ(0);
}

#counter {
  user-select: none;

  // nb: we expand #counter up/down so that its layer can include the animation, otherwise the
  // outer element (or at worst, the page) needs rerendering.
  $overflow: 100px / 2;  // TODO(samthor): We assume box is max 100px.
  margin: -($overflow) 0;
  padding: $overflow 0;
  z-index: 100;
  position: relative;
}

#background {
  background: $bar-color;
  border-radius: 8px;
  display: flex;
  justify-content: stretch;
  padding: 6px 0;
  box-shadow: 1px 3px 0 3px rgba(0, 0, 0, 0.1);

  .bar {
    width: 1px;
    background: rgba(0, 0, 0, 0.25);
  }
}

.counter-box {
  $height: 42px;
  width: 44px;
  height: $height;
  position: relative;

  .holder {
    width: 100%;
    font-size: 24px;
    color: white;
    font-weight: 400;
    line-height: $height - 8px;
    margin-bottom: 8px;
    text-shadow: none;
    position: absolute;
    transform: translateY(0);
    will-change: transform;
    z-index: 100;
    animation-duration: $tick-time;

    &.prev {
      transform: translateY(100%);
      opacity: 0;
    }
  }

  &.anim {
    .holder.active {
      animation-name: counter-step-active;
    }
    .holder.prev {
      animation-name: counter-step-prev;
    }
  }
}

.bottom {
  position: absolute;
  bottom: 0;
  left: 0;
  right: 0;
  text-align: center;
}

@keyframes counter-step-active {
  0% {
    transform: translateY(50%);
    opacity: 0;
  }
  100% {
    transform: translateY(0%);
    opacity: 1;
  }
}
@keyframes counter-step-prev {
  0% {
    transform: translateY(0%);
    opacity: 1;
  }
  100% {
    transform: translateY(-50%);
    opacity: 0;
  }
}

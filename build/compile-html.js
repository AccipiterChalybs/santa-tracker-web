const dom = require('./dom.js');
const fsp = require('./fsp.js');
const {minify} = require('html-minifier');
const messages = require('./messages.js');
const terser = require('terser');


/**
 * @param {string} filename
 * @param {{
 *   compile: boolean,
 *   lang: string,
 *   body: (!Object<string, string>|undefined),
 * }}
 */
module.exports = async (filename, options) => {
  const document = dom.parse(await fsp.readFile(filename, 'utf8'));
  const msg = messages(options.lang);

  // apply data-key attributes to body
  if (options.body) {
    Object.keys(options.body).forEach((key) => {
      const value = options.body[key];
      if (value != null || value !== false) {
        document.body.setAttribute(`data-${key}`, value === true ? '' : value);
      }
    });
  }

  // replace all [msgid] strings
  const msgs = Array.from(document.querySelectorAll('[msgid]'));
  msgs.forEach((node) => {
    const string = msg(node.getAttribute('msgid'));

    if (node.localName === 'meta') {
      node.setAttribute('content', string);
    } else if (node.closest('head') && node.localName !== 'title') {
      throw new Error(`unhandled <head> node: ${node.localName}`);
    } else {
      node.innerHTML = string;
    }

    node.removeAttribute('msgid');
  });

  // return early if not compiling
  if (!options.compile) {
    return dom.serialize(document);
  }

  const out = dom.serialize(document);
  const mo = {
    collapseBooleanAttributes: true,
    collapseWhitespace: true,
    includeAutoGeneratedTags: false,
    keepClosingSlash: true,
    minifyCSS: true,
    minifyJS: (code) => {
      // nb. html-minifier does NOT see scripts of `type="module"`, which is fine for now as they
      // should be compiled away only in production anyway.
      const result = terser.minify(code);
      if (result.error) {
        throw new Error(`terser error: ${result.error}`);
      }
      return result.code;
    },
    removeRedundantAttributes: true,
    sortAttributes: true,
    sortClassName: true,
  };
  return minify(out, mo);
};

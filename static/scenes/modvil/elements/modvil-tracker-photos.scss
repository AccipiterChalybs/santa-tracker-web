$border-width: 4px;
$photos-bar-size: 140%;
$photos-bar-top-size: 48px;

.outer {
  width: 100%;
  height: 100%;

  .grow {
    flex-grow: 1;
  }

  cursor: pointer;
  // nb. this MUST be position: static for the open effect to work
  position: static;
  // position: relative;
}


.photos {
  filter: drop-shadow(2px 4px 0 rgba(0, 0, 0, 0.125));
  height: 100%;
  width: 100%;
  position: relative;
  z-index: 100;
}


// Fixed content that is visible only while the photos are closed.
.view-closed {
  position: relative;
  top: calc(-100%);
  left: 0;
  right: 0;
  height: 100%;
  border: $border-width solid transparent;
  box-sizing: border-box;
  transition: opacity 0.25s ease-in-out;
  z-index: 200;

  &::after {
    content: '';
    position: absolute;
    bottom: 0;
    left: 0;
    width: 50%;
    height: 50%;
    background: _rel("../../../img/tracker/localguides.svg") bottom left / contain no-repeat;
    transition: transform 0.25s ease-in-out, opacity 0.25s ease-in-out;
    opacity: 1;

    .photos:empty + & {
      opacity: 0;
    }
  }

  .photos.open + & {
    top: 0;
    opacity: 0;
  }
}

// Fixed content that is visible when photos are open.
.view-open {
  position: absolute;
  left: 0;
  right: 0;
  bottom: 0;  // expand from bottom of outer .info div
  background: #00cc81;
  height: calc(#{$photos-bar-size} + #{$photos-bar-top-size});
  transition: opacity 0.25s ease-in-out;
  z-index: 10;

  .top {
    height: $photos-bar-top-size;
    padding: 0 4%;

    white-space: nowrap;
    text-overflow: ellipsis;
    overflow: hidden;

    display: flex;
    align-items: space-around;
  }

  .photos:not(.open) ~ & {
    pointer-events: none;
    opacity: 0;
  }
}


.view-open .title {

}


.view-closed .title {
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  padding: 4px 12px 0;
  transition: transform 0.25s ease-in-out, opacity 0.25s ease-in-out;

  &.gone {
    transform: translateY(10%);
    opacity: 0;
  }

  h1 {
    font-family: 'Lobster';
    font-size: 32px;
    font-weight: 300;
    line-height: 38px;
    margin: 0 -6px;
    color: white;
    transform: rotate(-3.5deg);
    max-width: 100%;
    text-shadow: 0 1px 0 rgba(0, 0, 0, 0.125);
    word-wrap: break-word;
  }
  h2 {
    font-size: 11px;
    line-height: 13px;
    color: #eefda5;
    font-weight: 500;
  }
}


modvil-tracker-photo {
  pointer-events: none;

  width: 100%;
  height: 100%;
  position: absolute;
  transform-origin: center;
  transition: transform 0.25s ease-in-out;

  z-index: -1000;

  @for $i from 1 through 10 {
    &:nth-child(#{$i}) {
      z-index: -$i;
    }
  }

  &[destroy] {
    z-index: -1000;
  }
}

// Show all photos mode.
.photos.open {
  $photo-width: 20%;
  $photo-height: 90%;

  // This monstrosity occurs so we don't have to use transform on the inner modvil-tracker-photo.
  // Position the .photos.open div with the same "inverse" transform that we might set on the photo
  // to make it appear centered (e.g., transform(-50%, -50%)).

  position: absolute;
  left: -($photo-width / 2);
  right: 0;
  bottom: (100% - $photo-height) / -2;  // expand from bottom of outer .info div
  height: $photos-bar-size;

  modvil-tracker-photo {
    position: absolute;
    width: $photo-width;
    height: $photo-height;

    &.leave {
      --gone-direction: -1;
    }

    @for $i from 0 through 3 {
      &[data-position="#{$i}"] {
        left: 4% + ($i * 24%) + 10%;
      }
    }
  }
}

// Default state, photos in stack.
.photos:not(.open) {
  modvil-tracker-photo {
    // default at back
    transform: scale(0);

    &:nth-child(1) {
      --photo-darken: 0.25;
      transform: translateY(0);
    }

    @for $i from 1 through 5 {
      &:nth-child(#{$i + 1}) {
        $scale: 1.0 - ($i * 0.05);
        transform: translateY($i * -16px - $scale * $border-width + 6px) scale($scale);

        .outer:hover & {
          transform: translateY($i * -32px - $scale * $border-width + 6px) scale($scale) rotate($i * 2deg) translateX($i * 4px);
        }
      }
    }
  }
}

